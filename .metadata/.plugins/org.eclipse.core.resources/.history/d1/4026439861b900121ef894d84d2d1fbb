package com.example.conkylive;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.Bundle;
import android.view.SurfaceHolder;

public class RainbowWallpaper extends AnimationWallpaper {
	 
	   @Override
	   public Engine onCreateEngine() {
	      return new Engine();
	   }
	 
	   class Engine extends AnimationEngine {
		   int offsetX;
		   int offsetY;
		   int height;
		   int width;
		   int visibleWidth;
		   Paint paint;
		   List<RainbowCircle> circles = new ArrayList<RainbowCircle>();
		   int iterationCount;
		   
		   @Override
		   public void onSurfaceChanged(SurfaceHolder holder, int format,
		         int width, int height) {
		    
		      this.height = height;
		      if (this.isPreview()) {
		         this.width = width;
		      } else {
		         this.width = 2 * width;
		      }
		      this.visibleWidth = width;
		    
		      for (int i = 0; i < 20; i++) {
		         this.createRandomCircle();
		      }
		    
		      super.onSurfaceChanged(holder, format, width, height);
		   }
		    
		   @Override
		   public void onOffsetsChanged(float xOffset, float yOffset,
		         float xOffsetStep, float yOffsetStep, int xPixelOffset,
		         int yPixelOffset) {
		      // store the offsets
		      this.offsetX = xPixelOffset;
		      this.offsetY = yPixelOffset;
		    
		      super.onOffsetsChanged(xOffset, yOffset, xOffsetStep, yOffsetStep,
		            xPixelOffset, yPixelOffset);
		   }
		   
		   @Override
		   public Bundle onCommand(String action, int x, int y, int z,
		         Bundle extras, boolean resultRequested) {
		      if ("android.wallpaper.tap".equals(action)) {
		         createCircle(x - this.offsetX, y - this.offsetY);
		      }
		      return super.onCommand(action, x, y, z, extras, resultRequested);
		   }
		   
		   void createRandomCircle() {
		      int x = (int) (width * Math.random());
		      int y = (int) (height * Math.random());
		      createCircle(x, y);
		   }
		    
		   int getColor(float yFraction) {
		      return Color.HSVToColor(new float[] { 360.0f * yFraction, 1.0f,
		            1.0f });
		   }
		    
		   void createCircle(int x, int y) {
		      float radius = (float) (40 + 20 * Math.random());
		    
		      float yFraction = (float) y / (float) height;
		      yFraction = yFraction + 0.05f - (float) (0.1f * (Math.random()));
		      if (yFraction < 0.0f)
		         yFraction += 1.0f;
		      if (yFraction > 1.0f)
		         yFraction -= 1.0f;
		      int color = getColor(yFraction);
		    
		      int steps = 40 + (int) (20 * Math.random());
		      RainbowCircle circle = new RainbowCircle(x, y, radius,color, steps);
		      synchronized (this.circles) {
		         this.circles.add(circle);
		      }
		   }
		   
		   protected void iteration() {
		         for (Iterator<RainbowCircle> it = circles.iterator(); it.hasNext();) {
		            RainbowCircle circle = it.next();
		            circle.tick();
		            if (circle.isDone())
		               it.remove();
		         }
				iterationCount++;
		         if (isPreview() || iterationCount % 2 == 0)
		            createRandomCircle();
		      
		    
		      super.iteration();
		   }		   
	   }
}